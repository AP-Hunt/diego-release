#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/executor
LOG_DIR=/var/vcap/sys/log/executor
CONF_DIR=/var/vcap/jobs/executor/config
PIDFILE=$RUN_DIR/executor.pid
DATA_DIR=/var/vcap/data/executor
TMP_DIR=$DATA_DIR/tmp

source /var/vcap/packages/pid_utils/pid_utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "executor"

    mkdir -p $RUN_DIR
    mkdir -p $DATA_DIR
    mkdir -p $LOG_DIR

    mkdir -p $TMP_DIR

    echo $$ > $PIDFILE

    if running_in_container; then
        echo "Not setting /proc/sys/net/ipv4 parameters, since I'm running inside a linux container"
    else
        # TCP_FIN_TIMEOUT
        # This setting determines the time that must elapse before TCP/IP can release a closed connection and reuse
        # its resources. During this TIME_WAIT state, reopening the connection to the client costs less than establishing
        # a new connection. By reducing the value of this entry, TCP/IP can release closed connections faster, making more
        # resources available for new connections. Addjust this in the presense of many connections sitting in the
        # TIME_WAIT state:

        echo 10 > /proc/sys/net/ipv4/tcp_fin_timeout

        # TCP_TW_REUSE
        # This allows reusing sockets in TIME_WAIT state for new connections when it is safe from protocol viewpoint.
        # Default value is 0 (disabled). It is generally a safer alternative to tcp_tw_recycle

        echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse
    fi

    # Allowed number of open file descriptors
    ulimit -n 100000

    exec /var/vcap/packages/executor/bin/executor \
      -listenAddr=<%= p("diego.executor.listen_addr") %> \
      -skipCertVerify=<%= p("diego.ssl.skip_cert_verify") %> \
      -debugAddr=<%= p("diego.executor.debug_addr") %> \
      -gardenNetwork=<%= p("diego.executor.garden.network") %> \
      -gardenAddr=<%= p("diego.executor.garden.address") %> \
      -memoryMB=<%= p("diego.executor.memory_capacity_mb") %> \
      -diskMB=<%= p("diego.executor.disk_capacity_mb") %> \
      -containerInodeLimit=<%= p("diego.executor.container_inode_limit") %> \
      -containerMaxCpuShares=<%= p("diego.executor.container_max_cpu_shares") %> \
      -tempDir=$TMP_DIR \
      -cachePath=<%= p("diego.executor.cache_path") %>\
      -maxCacheSizeInBytes=<%= p("diego.executor.max_cache_size_in_bytes") %>\
      -allowPrivileged=<%= p("diego.executor.allow_privileged") %>\
      -exportNetworkEnvVars=<%= p("diego.executor.export_network_env_vars") %>\
      -drainTimeout=<%= "#{p("diego.executor.drain_timeout_in_seconds")}s" %> \
      -healthyMonitoringInterval=<%= "#{p("diego.executor.healthy_monitoring_interval_in_seconds")}s" %> \
      -unhealthyMonitoringInterval=<%= "#{p("diego.executor.unhealthy_monitoring_interval_in_seconds")}s" %> \
      -logLevel=<%= p("diego.executor.log_level") %> \
      2>> $LOG_DIR/executor.stderr.log \
      1> >(tee -a $LOG_DIR/executor.stdout.log | logger -t vcap.executor)

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: executor_ctl {start|stop}"

    ;;

esac
