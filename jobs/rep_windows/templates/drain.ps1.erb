$ErrorActionPreference = "Stop";
trap { $host.SetShouldExit(1) }

$service_name="rep_windows"
$log_dir="/var/vcap/sys/log/rep_windows"
$logfile="${log_dir}/drain.log"

$address="https://<%=p("diego.rep.listen_addr_admin")%>"

New-Item -ItemType "directory" -Force "${log_dir}" 2>&1 | `
    Out-File -Append -Encoding utf8 -FilePath $logfile

$tls_ca_cert="<%="/var/vcap/jobs/#{p("diego.rep.job_name")}/config/certs/tls_ca.crt"%>"
$tls_cert="<%="/var/vcap/jobs/#{p("diego.rep.job_name")}/config/certs/tls.crt"%>"
$tls_key="<%="/var/vcap/jobs/#{p("diego.rep.job_name")}/config/certs/tls.key"%>"

function evacuate {
    $origErrorActionPreference = $ErrorActionPreference
    $ErrorActionPreference = "Continue"
    <%="/var/vcap/packages/#{p("diego.rep.job_name")}/gocurl.exe"%> -X "POST" `
        --cacert=${tls_ca_cert} --cert=${tls_cert} --key=${tls_key} "$address/evacuate" 2>&1 | `
        Out-File -Append -Encoding utf8 -FilePath $logfile
    $evacuateSucceeded = $?
    $ErrorActionPreference = $origErrorActionPreference
    return $evacuateSucceeded
}

function heartbeat {
    try {
    <%="/var/vcap/packages/#{p("diego.rep.job_name")}/gocurl.exe"%> `
        --cacert=${tls_ca_cert} --cert=${tls_cert} --key=${tls_key} "$address/ping" 2>&1 | `
        Out-File -Append -Encoding utf8 -FilePath $logfile
    } catch {
        return $false
    }
    return $true
}

function date {
<% if p("logging.format.timestamp") == "rfc3339" %>
    return Get-Date
<% else %>
    return [Xml.XmlConvert]::ToString((get-date),[Xml.XmlDateTimeSerializationMode]::Utc)
<% end %>
}

$svc = (Get-Service | Where { $_.Name -eq $service_name })
if ($svc -eq $null) {
    "$(date): service not found: '${service_name}'" | `
        Out-File -Append -Encoding utf8 -FilePath $logfile
    "0"
    Exit 0
}
if ($svc.Status -ne 'Running') {
    "$(date): service '${service_name}' not running" | `
        Out-File -Append -Encoding utf8 -FilePath $logfile
    "0"
    Exit 0
}

$svc | Set-Service -StartupType Disabled
"$(date): service '${service_name}' StartupType set to 'Disabled'" | `
    Out-File -Append -Encoding utf8 -FilePath $logfile

"$(date): drain triggered" | Out-File -Append -Encoding utf8 -FilePath $logfile
if (evacuate) {
    while (heartbeat) {
        Start-Sleep -Seconds 5
        "$(date): waiting" | Out-File -Append -Encoding utf8 -FilePath $logfile
    }
    # NOTE: rep invokes 'kill_and_wait' here
} else {
    "$(date): Evacuate failed, drain exiting (exit 1)" | Out-File -Append -Encoding utf8 -FilePath $logfile
    Exit 1 # NOTE: matching behavior of 'rep' drain script
}

$svc | Set-Service -StartupType Automatic
"$(date): service '${service_name}' StartupType set to 'Automatic'" | `
    Out-File -Append -Encoding utf8 -FilePath $logfile

"0"
Exit 0
