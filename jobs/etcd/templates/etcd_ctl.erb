#!/bin/bash

set -e -u -x

RUN_DIR=/var/vcap/sys/run/etcd
LOG_DIR=/var/vcap/sys/log/etcd
PIDFILE=$RUN_DIR/etcd.pid
STORE_DIR=/var/vcap/store
DATA_DIR=${STORE_DIR}/etcd

source /var/vcap/packages/pid_utils/pid_utils.sh

<%
  def discover_external_ip
    networks = spec.networks.marshal_dump

    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    if !network
      _, network = networks.first
    end

    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end

    network.ip
  end

  my_ip     = discover_external_ip
  peers     = p("diego.etcd.machines").map { |m| "http://#{m}:4001" }.join(",")
  node_name = "#{name}-#{spec.index}"

  listen_peer_url      = "http://0.0.0.0:7001"
  listen_client_url    = "http://0.0.0.0:4001"
  advertise_peer_url   = "http://#{my_ip}:7001"
  advertise_client_url = "http://#{my_ip}:4001"
%>

case $1 in

  start)
    pid_guard $PIDFILE "etcd"

    if ! mountpoint -q $STORE_DIR; then
      echo "$STORE_DIR must be a persistent disk"
      exit 1
    fi

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR
    mkdir -p $DATA_DIR

    chown -R vcap:vcap $RUN_DIR
    chown -R vcap:vcap $LOG_DIR
    chown -R vcap:vcap $DATA_DIR

    ulimit -n 65536

    if /var/vcap/packages/etcd/etcdctl -C '<%= peers %>' member list > /tmp/memberslist; then
      cluster_state=existing
      cluster=$(cat /tmp/memberslist | grep -v 'name= ' | sed 's/.*name=//' | sed 's/ clientURLs.*//' | sed 's/ peerURLs//' | tr -s "\n" "," | sed 's/,$//')
    else
      cluster_state=new
      cluster='<%= "#{node_name}=#{advertise_peer_url}" %>'
    fi

    if [ "$(wc -l /tmp/memberslist | cut -f1 -d' ')" -ne 1 ] || ! grep <%= my_ip %> /tmp/memberlist; then
      my_id=$(/var/vcap/packages/etcd/etcdctl -C '<%= peers %>' member list | grep <%= my_ip %> | sed 's/:.*//')
      if [ ! -z "$my_id" ]; then
        /var/vcap/packages/etcd/etcdctl -C '<%= peers %>' member remove $my_id
      fi
      rm -rf ${DATA_DIR}/*
    fi

    if ! /var/vcap/packages/etcd/etcdctl -C '<%= peers %>' member list | grep <%= my_ip %> ; then
      if [ $cluster_state == "existing" ]; then
        /var/vcap/packages/etcd/etcdctl -C '<%= peers %>' member add <%= node_name %> <%= advertise_peer_url %>
        cluster="${cluster},<%= "#{node_name}=#{advertise_peer_url}" %>"
      fi
    fi

    sleep 2

    chpst -u vcap:vcap /var/vcap/packages/etcd/etcd                                             \
        --name                        <%= node_name %>                                          \
        --data-dir                    $DATA_DIR                                                 \
        --heartbeat-interval          <%= p("diego.etcd.heartbeat_interval_in_milliseconds") %> \
        --election-timeout            <%= p("diego.etcd.election_timeout_in_milliseconds") %>   \
        --listen-peer-urls            <%= listen_peer_url %>                                    \
        --listen-client-urls          <%= listen_client_url %>                                  \
        --initial-advertise-peer-urls <%= advertise_peer_url %>                                 \
        --advertise-client-urls       <%= advertise_client_url %>                               \
        --initial-cluster             $cluster                                                  \
        --initial-cluster-state       $cluster_state                                            \
        2> >(tee -a $LOG_DIR/etcd.stderr.log | logger -t vcap.etcd)                             \
        1> >(tee -a $LOG_DIR/etcd.stdout.log | logger -t vcap.etcd) &

    etcd_pid=$!

    synced=false
    for i in $(seq <%= p("diego.etcd.log_sync_timeout_in_seconds") %>); do
      if /var/vcap/packages/etcd/etcdctl -C '<%= advertise_client_url %>' ls; then
        synced=true
        break
      fi
      sleep 1
    done

    if $synced; then
      echo $etcd_pid > $PIDFILE
      wait $etcd_pid
    else
      my_id=$(/var/vcap/packages/etcd/etcdctl -C '<%= peers %>' member list | grep <%= my_ip %> | sed 's/:.*//')
      if [ ! -z "$my_id" ]; then
        /var/vcap/packages/etcd/etcdctl -C '<%= peers %>' member remove $my_id
      fi
      rm -rf ${DATA_DIR}/*
      kill -9 $etcd_pid
      exit 1
    fi

    ;;

  stop)

    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: etcd_ctl {start|stop}"

    ;;

esac
