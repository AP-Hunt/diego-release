#!/bin/bash -e

RUN_DIR=/var/vcap/sys/run/garden-linux
LOG_DIR=/var/vcap/sys/log/garden-linux
PIDFILE=$RUN_DIR/garden-linux.pid
DATA_DIR=/var/vcap/data/garden-linux

source /var/vcap/packages/pid_utils/pid_utils.sh

# copied from https://github.com/concourse/concourse/blob/master/jobs/baggageclaim/templates/baggageclaim_ctl.erb#L54
# break out of bosh-lite device limitations
function permit_device_control() {
  local devices_mount_info=$(cat /proc/self/cgroup | grep devices)

  if [ -z "$devices_mount_info" ]; then
    # cgroups not set up; must not be in a container
    return
  fi

  local devices_subsytems=$(echo $devices_mount_info | cut -d: -f2)
  local devices_subdir=$(echo $devices_mount_info | cut -d: -f3)

  if [ "$devices_subdir" = "/" ]; then
    # we're in the root devices cgroup; must not be in a container
    return
  fi

  if [ ! -e /tmp/devices-cgroup ]; then
    # mount our container's devices subsystem somewhere
    mkdir /tmp/devices-cgroup
    mount -t cgroup -o $devices_subsytems none /tmp/devices-cgroup
  fi

  # permit our cgroup to do everything with all devices
  echo a > /tmp/devices-cgroup${devices_subdir}/devices.allow
}


case $1 in

  start)
    pid_guard $PIDFILE "garden-linux"
    if (( $(pidof garden-linux) )); then
      echo "$(date) garden-linux is already running, please stop it first"
      exit 1
    fi

    mkdir -p $RUN_DIR
    mkdir -p $DATA_DIR
    mkdir -p $LOG_DIR

    sysctl -w net.unix.max_dgram_qlen=8192

    <% if p("diego.garden-linux.kernel_network_tuning_enabled") == true %>
    # Use default local port range (higher ports are used for pooling)
    echo 32768 61000 > /proc/sys/net/ipv4/ip_local_port_range
    <% end %>

    depot=$DATA_DIR/depot

    mkdir -p $depot

    ulimit -n 65536

    echo $$ > $PIDFILE

    export PATH=/var/vcap/packages/shadow/sbin:$PATH
    export PATH=/var/vcap/packages/iptables/sbin:$PATH
    export PATH=/var/vcap/packages/btrfs-progs/bin:$PATH

    graph_path=$DATA_DIR/btrfs_graph

    <% if p("diego.garden-linux.mount_btrfs_loopback") %>
    backing_store=$DATA_DIR/garden_graph_backing_store
    mount_point=$graph_path

    if [ ! -f $backing_store ]
    then
      permit_device_control
      for i in $(seq 0 64); do
        if ! mknod -m 0660 /dev/loop$i b 7 $i; then
          break
        fi
      done

      echo "no backing store found at ${backing_store}: creating"
      touch $backing_store
      truncate -s <%= p('diego.garden-linux.btrfs_store_size_mb') %>M $backing_store

      loopback_device=$(losetup -f --show $backing_store)
      mkfs.btrfs --nodiscard $loopback_device
    else
      echo "backing store already exists, skipping creation"
    fi

    if cat /proc/mounts | grep $mount_point
    then
      echo "btrfs already mounted at $mount_point"
    else
      loopback_device="$(losetup -j $backing_store | cut -d':' -f1)"

      if [ -z $loopback_device ]; then
       echo "Cannot find loopback_device for mount point $backing_store">&2
       exit 1
      fi

      echo "mounting btrfs volume"
      mkdir -p $mount_point
      mount -t btrfs $loopback_device $mount_point
    fi
    <% end %>

    exec /var/vcap/packages/garden-linux/bin/garden-linux \
      -disableQuotas=<%= !p("diego.garden-linux.disk_quota_enabled") %> \
      -listenNetwork=<%= p("diego.garden-linux.listen_network") %> \
      -listenAddr=<%= p("diego.garden-linux.listen_address") %> \
      -denyNetworks=<%= p("diego.garden-linux.deny_networks").join(",") %> \
      -allowNetworks=<%= p("diego.garden-linux.allow_networks").join(",") %> \
      -debugAddr=<%= p("diego.garden-linux.debug_addr") %> \
      -bin=/var/vcap/packages/garden-linux/garden-bin \
      -depot=$DATA_DIR/depot \
      -graph=$graph_path \
      -containerGraceTime=1h \
      -portPoolSize=4534 \
      -mtu=<%= p("diego.garden-linux.mtu") %> \
      <% if_p("diego.garden-linux.insecure_docker_registry_list") do |list| %> \
      -insecureDockerRegistryList=<%= list.join(',') %> \
      <% end %> \
      2> >(tee -a $LOG_DIR/garden_linux.stderr.log | logger -p user.error -t vcap.garden-linux) \
      1> >(tee -a $LOG_DIR/garden_linux.stdout.log | logger -p user.info -t vcap.garden-linux)

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: garden-linux_ctl {start|stop}"

    ;;

esac
