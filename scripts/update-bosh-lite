#!/bin/bash -e

# This script will
# - update your local bosh-lite repo
# - optionally destroy your bosh-lite VM
# - launch a new/updated VM
# - download the latest stemcell and upload it into bosh-lite
# - deploy whatever is currently in cf-release and diego-release into bosh-lite
#
# Usage:
# ./update-bosh-lite [-r]
#   -r: Always destroy and recreate the bosh-lite VM
#
# Notes:
# Set VAGRANT_DEFAULT_PROVIDER to e.g. virtualbox or vmware_fusion if you want to change the default provider for the Vagrant VM.

WORKSPACE=${WORKSPACE:-$HOME/workspace}
BOSH_LITE_DIR=${BOSH_LITE_DIR:-$WORKSPACE/bosh-lite}
BOSH_LITE_DEPLOYMENTS_DIR=${BOSH_LITE_DEPLOYMENTS_DIR:-$HOME/deployments/bosh-lite}

STEMCELL_FILTER=${STEMCELL_FILTER:-boshlite-ubuntu-trusty-go_agent}
CF_RELEASE_DIR=${CF_RELEASE_DIR:-$WORKSPACE/cf-release}
DIEGO_RELEASE_DIR=${DIEGO_RELEASE_DIR:-$WORKSPACE/diego-release}

if [ "$1" == -r ]; then
  RECREATE_VM=true
else
  RECREATE_VM=false
fi

update_repo() {
  LOCAL_DIR=$1
  CLONE_URL=$2

  if test -d $LOCAL_DIR; then
    cd $LOCAL_DIR
    git pull -q --rebase
  else
    git clone $CLONE_URL $LOCAL_DIR
    cd $LOCAL_DIR
  fi

  git submodule update --init --recursive
}

update_bosh_lite_vm() {
  if ! vagrant status default | grep 'not created' -q; then
    if $RECREATE_VM; then
      vagrant destroy -f default
    else
      echo "Note: VM already exists. Use '$0 -r' to recreate the VM from scratch."
    fi
  fi

  vagrant up

  echo "  Adding routes for bosh-lite, your sudo password may be required."
  bin/add-route >/dev/null
  bosh -n -q target 192.168.50.4 lite
  bosh -q login admin admin
}

update_stemcell() {
  STEMCELL_FILE=$(bosh public stemcells | grep $STEMCELL_FILTER | tail -n1 | cut -d' ' -f2)
  test -n $STEMCELL_FILE

  if ! test -f $STEMCELL_FILE; then
    bosh download public stemcell $STEMCELL_FILE
  fi

  echo "==> Uploading stemcell..."
  bosh -q upload stemcell $STEMCELL_FILE --skip-if-exists
}

prepare_bosh_lite_deployments_dir() {
  mkdir -p $BOSH_LITE_DEPLOYMENTS_DIR
  echo "director_uuid: $(bosh status --uuid)" > $BOSH_LITE_DEPLOYMENTS_DIR/director.yml
}

update_release() {
  LOCAL_DIR=$1

  cd $LOCAL_DIR
  echo "==> Updating release $LOCAL_DIR..."
  bosh -n -q create release --force
  bosh -n -q upload release --skip-if-exists
}

deploy_cf_release() {
  cd $CF_RELEASE_DIR
  echo "==> Deploying cf-release..."
  ./generate_deployment_manifest warden $BOSH_LITE_DEPLOYMENTS_DIR/director.yml $DIEGO_RELEASE_DIR/templates/enable_diego_in_cc.yml > $BOSH_LITE_DEPLOYMENTS_DIR/cf.yml
  bosh -d $BOSH_LITE_DEPLOYMENTS_DIR/cf.yml -q -n deploy
}

deploy_diego_release() {
  cd $DIEGO_RELEASE_DIR
  echo "==> Deploying diego-release..."
  scripts/generate-deployment-manifest bosh-lite $CF_RELEASE_DIR $BOSH_LITE_DEPLOYMENTS_DIR/director.yml > $BOSH_LITE_DEPLOYMENTS_DIR/diego.yml
  bosh -d $BOSH_LITE_DEPLOYMENTS_DIR/diego.yml -q -n deploy
}

retry() {
  MAX_ATTEMPTS=$1
  COMMAND=$2

  for (( ATTEMPT=1 ; ATTEMPT <= MAX_ATTEMPTS ; ATTEMPT++ )); do
    if $COMMAND; then
      return
    fi
    echo "command failed (attempt $ATTEMPT/$MAX_ATTEMPTS)" >&2
  done

  echo "all attempts failed, aborting" >&2
  exit 1
}

parallel() {
  CMD1=$1
  CMD2=$2

  $CMD1 &
  pid=$!
  trap "kill $pid" EXIT
  $CMD2
  wait $pid
  trap - EXIT
}

update_repo $BOSH_LITE_DIR https://github.com/cloudfoundry/bosh-lite
update_bosh_lite_vm
update_stemcell

parallel "update_release $CF_RELEASE_DIR" "update_release $DIEGO_RELEASE_DIR"
parallel "retry 3 deploy_cf_release" "retry 3 deploy_diego_release"
